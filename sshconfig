#!/bin/bash
# Copyright (C) 2015 Arash Shams <xsysxpert@gmail.com>.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
CONFIGFILE="$HOME/.ssh/config"
TEMPFILE="$HOME/.ssh/.ssctemp"

if [ ! -f $CONFIGFILE ]; then
    mkdir -p $HOME/.ssh && touch $CONFIGFILE
fi

is_integer() {
    printf "%d" $1 > /dev/null 2>&1
    return $?
}

do_check_names() {
	grep "^Host" $CONFIGFILE | cut -f2- -d " "
	exit 0
}

success() {
	printf "\n  \033[32mSuccess: %s\033[0m\n\n" "$@"
	# exit 0
}

error() {
	printf "\n  \033[31mError: %s\033[0m\n\n" "$@"
	exit 1
}

print() {
	printf "  \033[36m%10s\033[0m : \033[90m%s\033[0m\n" "$1" "$2"
}

do_add_process() {
    if [[ "$#" -eq 6 || "$#" -eq 4 ]]; then
	name=$2
	username=$3
	hostname=$4
	if [[ -n $6 ]]; then
	    id=$5
	    port=$6
	else
	    port=22
	fi
    elif [[ "$#" -eq 5 ]]; then
	if is_integer $5; then
	    name=$2
	    username=$3
	    hostname=$4
	    port=$5
	    
	else
	    name=$2
	    username=$3
	    hostname=$4
	    id=$5
	    port=22
	fi
    else
	error "ssc $1 NAME USERNAME HOSTNAME [IdentityKey] [PORT]"
    fi

    if [[ $(do_check_names | grep --count "^$name$") != 0 ]]; then
	error "This name is already used. Try again with another name."
    fi
    
    if [ -n "$id" ]; then
	cat << EOB >> $CONFIGFILE

Host $name
	HostName $hostname
	User $username
	Port $port
	IdentityFile $id
EOB
    else
	cat << EOB >> $CONFIGFILE

Host $name
	HostName $hostname
	User $username
	Port $port
EOB
    fi
    success "\"$name\" added successfuly to host list"
}

do_remove_process() {
    if [ "$#" != 2 ]; then
	error "Usage : ssc $1 NAME"
    fi
    name=$2
    if [[ $(do_check_names | grep --count "^$name$") != 0 ]]; then
	sed -ie "/^Host $name$/,/^$/d" $CONFIGFILE
	success "\"$name\" Removed successfully"
    	# exit 0
    else
	error "Sorry, \"$name\" is not in list"
    fi
}

do_list_process() {
    if [ -n "$2" ]; then
     	name=$2
	if [[ $(do_check_names | grep --count "^$name$") != 0 ]]; then
		awk -v name="$name" -v green="\033[0;32m" -v reset="\033[0m" -v RS='' 'index($0, name) { for (i = 1; i < NF; i += 2) { printf("%s%s%s: %s%s", green, $i, reset, $(i + 1), (i < NF -2)? "  ": "\n") } exit }' $CONFIGFILE 
		exit 0
	else
		error "Sorry, \"$name\" is not in list"
	fi
    else
	 awk -v name="$name" -v green="\033[0;32m" -v reset="\033[0m" -v RS='' '{ for (i = 1; i < NF; i += 2) { printf("%s%s%s: %s\t%s", green, $i, reset, $(i + 1), (i < NF -2)? "  ": "\n") } }' $CONFIGFILE | column -t
    fi
}

do_connect() {
	name=$1
	if [[ $(do_check_names | grep --count "^$name$") != 0 ]]; then
		ssh $1
		exit 0
	fi
}

do_search_process() {
	name=$2
	ssc ls | grep $name
}

do_edit_process() {
    name=$2
	while [[ -z ${name} ]]; do
		echo -n "Name: "
		read name
	done
	add_new=1
	if [[ $(do_check_names | grep --count "^$name$") == 0 ]]; then
		echo "You don't have any host with given name. Please check it again OR you can add new one with continue the procedure."
		add_new=0
	fi
	do_easy_input $name
	if [[ ${add_new} != 0 ]]; then
	    do_remove_process remove $name 1>/dev/null
	fi
    do_add_process add $name $username $hostname $identity $port 1>/dev/null
    success "\"${name}\" successfully edited/added."
}

do_easy_input() {
    name=$1
	while [[ -z ${name} ]]; do
		echo -n "Name: "
		read name
	done
	echo -n "Username [root]: "
	read username
	[[ -z ${username} ]] && username="root"
	echo -n "Hostname [127.0.0.1]: "
	read hostname
	[[ -z ${hostname} ]] && hostname="127.0.0.1"
	echo -n "Identity key [~/.ssh/id_rsa]: "
	read identity
	[[ -z ${idnetity} ]] && identiry="~/.ssh/id_rsa"
	echo -n "PORT [22]: "
	read port
	[[ -z ${port} ]] && port="22"
	echo -n "Forward agent [Y/n]: "
	read forward
	[[ -z ${forward} ]] && forward="yes"
	echo -n "Strict hostkey checking [y/N]: "
	read strict
	[[ -z ${strict} ]] && strict="no"
	echo ${name} ${username} ${hostname} ${identity} ${port} ${forward} ${strict}
}

do_iterm_process() {
	name=$2
	if [[ $(do_check_names | grep --count "^$name$") == 0 ]]; then
		error "Sorry, \"$name\" is not in list"
	fi
	
	ITERMFOLDER="$HOME/Library/Application Support/iTerm2/DynamicProfiles"
	PROFILEFILE="$ITERMFOLDER/Profiles.json"

	if [ ! -d "${ITERMFOLDER}" ]; then
		error "iTerm folder could not be found"
	fi

	if [ ! -f "${PROFILEFILE}" ]; then
		echo '{"Profiles": []}' >> "$PROFILEFILE"
	fi

	if ! command -v jq &> /dev/null; then
		error "jq utility could not be found"
	fi

	EXIST=$(cat "$PROFILEFILE" | jq ".Profiles[] | select(.Guid==\"$name\")")
	if [[ ${#EXIST} != 0 ]]; then
		error "\"$name\" profile already exist"
	fi

	read -d '' PROFILE << EOB
[{
	"Guid" : "$name",
	"Name" : "$name",
	"ShortCut" : "",
	"Custom Command" : "Yes",
	"Command" : "ssh $name"
}]
EOB

	echo $(cat "$PROFILEFILE" | jq ".Profiles |= .+ $PROFILE") > "$PROFILEFILE"
	success "\"${name}\" successfully installed into iTerm2."
}

do_show_usage() {
	print "Add" "ssc add/-a NAME USERNAME HOSTNAME [IdentityKey] [PORT] "
	print "Edit" "ssc edit/-e NAME"
	print "Remove" "ssc remove/-r/rm  NAME"
	print "List" "ssc list/-l/ls [NAME]"
	print "Search" "ssc search/-s NAME"
	print "ITerm" "ssc iterm/-i NAME"
	print "Version" "ssc version/-v"
	print "Help" "ssc help/-h"
}

do_show_version() {
	print "Version" "Version 1.8 Stable"
	print "Contribute" "Fork me at Github <https://github.com/Ara4Sh/sshconfig>"
}

action=$1
case $action in
	add | -a)
	    do_add_process $@
	    ;;
	remove | -r | rm)
	    do_remove_process $@
	    ;;
	list | -l | ls)
	    do_list_process $@
	    ;;
	search | -s)
	    do_search_process $@
	    ;;
	iterm | -i)
	    do_iterm_process $@
	    ;;
	version | -v)
	    do_show_version
	    ;;
	edit | -e)
	    do_edit_process $@
	    ;;
	help | -h)
	    do_show_usage
	    ;;
	*)
	    do_connect $@
	    do_show_usage
	    echo ""
	    do_show_version
	    ;;
esac

exit 0
